int rows[] = { 13, 12, 11, 10, 9, 8, 7, 6 };
int columns[] = { 14, 15, 16, 17, 18, 19, 20, 21 };
int dipSwitchPin = 5;

int ZERO[8][8] = {
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 },
};

int ONE[8][8] = {
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 0, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 },
};

int TWO[8][8] = {
  { 0 ,0, 1, 1, 1, 1, 1, 0 },
  { 0 ,1, 1, 0, 0, 1, 1, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 },
  { 0, 1, 1, 0, 0, 0, 0, 0 }, 
  { 0, 1, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 } 
};

int THREE[8][8] = {
  { 0 ,1, 1, 1, 1, 1, 0, 0 },
  { 0 ,1, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 }, 
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 } 
};

int FOUR[8][8] = {
  { 0 ,0, 0, 0, 1, 1, 0, 0 },
  { 0 ,0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 },
  { 0, 1, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 }, 
  { 0, 0, 0, 0, 1, 1, 0, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 } 
};

int FIVE[8][8] = {
  { 0 ,0, 1, 1, 1, 1, 0, 0 },
  { 0 ,0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 }, 
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 } 
};

int SIX[8][8] = {
  { 0 ,1, 1, 0, 0, 0, 0, 0 },
  { 0 ,1, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 0, 0, 0, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 0, 1, 1, 0, 0 }, 
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 } 
};

int SEVEN[8][8] = {
  { 0 ,1, 1, 1, 1, 1, 1, 0 },
  { 0 ,1, 1, 1, 1, 1, 1, 0 },
  { 0, 0, 0, 0, 1, 1, 0, 0 },
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 }, 
  { 0, 0, 1, 1, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 0, 0, 0, 0 } 
};

int EIGHT[8][8] = {
  { 0 ,0, 1, 1, 1, 1, 0, 0 },
  { 0 ,1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 }, 
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 } 
};

int NINE[8][8] = {
  { 0 ,1, 1, 1, 1, 1, 1, 0 },
  { 0 ,1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 1, 0, 0, 1, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 0, 0, 0, 0, 1, 1, 0 }, 
  { 0, 0, 0, 0, 0, 1, 1, 0 },
  { 0, 0, 0, 0, 0, 1, 1, 0 } 
};

int A[8][8] = {
  { 0, 0, 0, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 1, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
};

int B[8][8] = {
  { 0, 1, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 1, 0 },
};


int C[8][8] = {
  { 0, 0, 1, 1, 1, 1, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 1, 0 },
};

int D[8][8] = {
  { 0, 1, 1, 1, 1, 1, 0, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 0, 0, 0, 0, 1, 0 },
  { 0, 1, 1, 1, 1, 1, 0, 0 },
};

int E[8][8] = {
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 1, 0, 0 },
};

int F[8][8] = {
  { 0, 0, 1, 1, 1, 1, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 1, 1, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
  { 0, 0, 1, 0, 0, 0, 0, 0 },
};

void setup() {
  for (int i = 0; i < 8; i++) {
    pinMode(rows[i], OUTPUT);
    pinMode(columns[i], OUTPUT);
  }

  pinMode(dipSwitchPin, INPUT_PULLUP);

  for (int i = 0; i < 8; i++) {
    digitalWrite(rows[i], HIGH);
    digitalWrite(columns[i], LOW);
  }
}

void SelectRow(int row) {
  for (int i = 0; i < 8; i++) {
    if (row == i + 1) {
      digitalWrite(rows[i], LOW);
    } else {
      digitalWrite(rows[i], HIGH); 
    }
  }
}

void setLed(int column, int state) {

  if (column >= 1 && column <= 8) {
    digitalWrite(columns[column - 1], state);
  }
}

void loop() {

  int switchState = digitalRead(dipSwitchPin);

  // Check if the dip switch is pushed up

  if (switchState == LOW) {
    for (int x = 0; x < 75; x++){
      for (int j = 7; j >= 0; j--) {
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, ZERO[j][i]);
          SelectRow(j + 1);
        }
        delay(2);
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, ONE[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, TWO[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, THREE[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, FOUR[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, FIVE[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, SIX[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, SEVEN[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, EIGHT[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, NINE[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    // Display the pattern 'A' on the matrix
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, A[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, B[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, C[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, D[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, E[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
    for (int x = 0; x < 75; x++) {
      for (int j = 0; j < 8; j++) {
        SelectRow(j + 1);
        for (int i = 0; i < 8; i++) {
          setLed(i + 1, F[j][i]);
        }
        delay(2);  
      }
      delay(2);
    }
  } else {
    for (int i = 0; i < 8; i++) {
      digitalWrite(rows[i], HIGH);
    }
    for (int i = 0; i < 8; i++) {
      digitalWrite(columns[i], LOW);
    }
  }
}
